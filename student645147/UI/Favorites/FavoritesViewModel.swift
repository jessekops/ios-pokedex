////  FavoritesViewModel.swift//  student645147////  Created by user271057 on 11/20/24.//import Foundationclass FavoritesViewModel: ObservableObject {    @Published var favoritePokemons: [Pokemon] = []    @Published var isLoading = false    @Published var errorMessage: String?    private let userDefaults = UserDefaults.standard        func fetchFavorites() {        isLoading = true        errorMessage = nil                guard let savedIDs = userDefaults.array(forKey: "favorites") as? [Int] else {            self.isLoading = false            return        }                var pokemons: [Pokemon] = []        let dispatchGroup = DispatchGroup()                for id in savedIDs {            dispatchGroup.enter()            fetchPokemonDetails(for: id) { pokemon in                if let pokemon = pokemon {                    pokemons.append(pokemon)                }                dispatchGroup.leave()            }        }                dispatchGroup.notify(queue: .main) {            self.favoritePokemons = pokemons            self.isLoading = false        }    }        private func fetchPokemonDetails(for id: Int, completion: @escaping (Pokemon?) -> Void) {        guard let url = URL(string: "https://pokeapi.co/api/v2/pokemon/\(id)") else {            completion(nil)            return        }                URLSession.shared.dataTask(with: url) { data, response, error in            if let data = data {                do {                    let pokemonResponse = try JSONDecoder().decode(PokemonDetailResponse.self, from: data)                    let pokemon = Pokemon(id: pokemonResponse.id, name: pokemonResponse.name)                    completion(pokemon)                } catch {                    completion(nil)                }            } else {                completion(nil)            }        }.resume()    }}