////  FavoritesViewModel.swift//  student645147////  Created by user271057 on 11/20/24.//import Foundationclass FavoritesViewModel: ObservableObject {    @Published var favoritePokemons: [Pokemon] = []    @Published var isLoading = false    @Published var errorMessage: String?    private let pokemonDetailRepository = PokemonDetailRepository()         func fetchFavorites() {        isLoading = true        errorMessage = nil                guard let savedIDs = UserDefaults.standard.array(forKey: "favorites") as? [Int] else {            self.isLoading = false            return        }                var pokemons: [Pokemon] = []        let dispatchGroup = DispatchGroup()                for id in savedIDs {            dispatchGroup.enter()            fetchPokemonDetails(for: id) { pokemon in                if let pokemon = pokemon {                    pokemons.append(pokemon)                }                dispatchGroup.leave()            }        }                dispatchGroup.notify(queue: .main) {            self.favoritePokemons = pokemons            self.isLoading = false        }    }        private func fetchPokemonDetails(for id: Int, completion: @escaping (Pokemon?) -> Void) {        pokemonDetailRepository.getPokemonDetail(for: id) { result in            switch result {            case .success(let pokemonDetail):                let pokemon = Pokemon(id: pokemonDetail.id, name: pokemonDetail.name)                completion(pokemon)            case .failure:                completion(nil)            }        }    }}